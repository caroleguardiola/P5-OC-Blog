-- phpMyAdmin SQL Dump
-- version 4.7.4
-- https://www.phpmyadmin.net/
--
-- Hôte : 127.0.0.1:3306
-- Généré le :  mer. 20 déc. 2017 à 21:14
-- Version du serveur :  5.7.19
-- Version de PHP :  7.1.9

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données :  `blog`
--

-- --------------------------------------------------------

--
-- Structure de la table `posts`
--

DROP TABLE IF EXISTS `posts`;
CREATE TABLE IF NOT EXISTS `posts` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `author` varchar(255) NOT NULL,
  `trailer` varchar(255) NOT NULL,
  `content` longtext NOT NULL,
  `dateCreation` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `dateUpdate` datetime DEFAULT NULL,
  `dateDelete` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;

--
-- Déchargement des données de la table `posts`
--

INSERT INTO `posts` (`id`, `title`, `author`, `trailer`, `content`, `dateCreation`, `dateUpdate`, `dateDelete`) VALUES
(1, 'Le Forum PHP 2017 fera la part belle aux retours d\'expérience', 'XAVIER LEUNE (AFUP)', 'Le président de l\'association française des utilisateurs de PHP, organisateur du forum, détaille le programme de l\'événement, et dévoile sa vision des dernières évolutions des technologies PHP.', 'Organisé par l\'Association française des utilisateurs de PHP (Afup), le Forum PHP se tiendra cette année les 26 et 27 octobre à Paris, au sein du centre de conférences de l\'hôtel Marriott Rive Gauche. En amont de l\'événement (dont le JDN est partenaire), le président de l\'Afup fait le point sur les dernières tendances de l\'écosystème PHP. L\'Afup donne aussi le coup d\'envoi de l\'enquête en ligne sur la base de laquelle sera réalisée la prochaine édition de son baromètre annuelle de l\'emploi dans l\'écosystème PHP, une étude qui doit paraître début 2018.\r\n\r\nJDN. Le Forum PHP 2017 fait la part belle aux retours d\'expérience…\r\n\r\nXavier Leune est le président de l\'association française des utilisateurs de PHP (Afup).  © JDN\r\nXavier Leune. Oui. Les retours d\'expérience fournissent des feedbacks très concrets sur les projets de développement, en matière de bonnes pratiques, de pièges à éviter... Nous avons par conséquent beaucoup développé ce volet du programme cette année. Le Forum PHP 2017 va permettre de découvrir notamment des retours d\'expérience de M6Web, Meetic, Radio France ou L\'Olympia. Aux côtés de ces présentations et des nombreuses conférences d\'experts proposées en parallèle, des ateliers techniques seront également ouverts aux visiteurs pour se frotter au code et échanger des astuces.\r\n\r\nQuelles sont les principales personnalités de la communauté PHP présentes cette année ?\r\nParmi les personnalités internationales présentes, Larry Garfield, directeur de l\'expérience développeur chez Platform.sh et lead contributeur de Drupal 8 Web Service, détaillera ses bonnes pratiques en gestion de projet de développement logiciel. Nicolas Grekas, core team du framework Symfony et CTO de Blackfire.io (groupe SensioLabs, ndlr), interviendra sur les process qualité liés à Symfony. Enfin, Remi Collet, senior software engineer chez Red Hat, réalisera une présentation de PHP 7.2.\r\n\r\nQuid des grandes évolutions du langage PHP cette année, et de PHP 7.2 ?\r\nLa sortie de PHP 7.2 est prévue pour fin novembre. Cette version, actuellement en bêta (ou RC2, ndlr), va introduire beaucoup de nouveautés. Parmi les plus importantes, on note notamment l\'ajout de la librairie de sécurité libsodium. Elle apporte une nouvelle couche pour gérer le hash de mots de passe et le chiffrement de données. Avec PHP 7.2, certaines fonctionnalités du langage vont également commencer à être dépréciées, et donc renvoyer des messages d\'erreur pour prévenir qu\'elles seront retirées des prochaines versions. L\'idée est de préparer le terrain en vue de la sortie de PHP 8 prévue d\'ici trois ans. La France est très impliquée dans le lancement de PHP 7.2. Les deux release managers de cette version sont le Français Remi Collet et Sara Golemon, ex-développeuse de Facebook qui travaille désormais pour le cloud français Platform.sh.\r\n\r\nQu\'en est-il du côté des frameworks PHP ?\r\nSymfony reste très dynamique sur le marché français. Zend Framework n\'a pas disparu du paysage mais cette infrastructure évolue moins rapidement que Symfony. Quant à Laravel, il demeure très présent aux Etats-Unis.\r\n\r\nComment s\'oriente désormais Symfony ?\r\nLa sortie de Symfony 4 est également prévue pour novembre. La principale nouveauté de cette version porte sur l\'introduction de Symfony Flex. Suivant une approche orientée \"expérience développeur\", cet outil a pour but de réduire la complexité de Symfony pour le mettre à la portée de plus petites équipes impliquées dans des projets moins ambitieux. Cela passe par l\'ajout d\'une couche d\'automatisation, avec à la clé des fonctions préconfigurées. En cela, la logique rejoint globalement celle de Laravel qui se veut plus simple à appréhender historiquement.\r\n\r\n\"Zend planche sur l\'intégration de la compilation JIT à PHP\"\r\nC\'est intéressant de relever que Symfony commence à recommander des bundles créés par la communauté open source pour réaliser certaines tâches. C\'est par exemple le cas avec API Platform qui automatise la création d\'API dans Symfony. Ce bundle est développé par l\'agence française Les-Tilleuls, qui est une société coopérative.\r\n\r\nÇa bouge par ailleurs du côté du projet open source HHVM de Facebook...\r\nDans un blog post qui vient d\'être publié, Facebook met en avant un changement de stratégie autour de HHVM. Il veut s\'éloigner de PHP 7 et ne plus proposer à terme de runtime alternatif (à celui de PHP ndlr). Il entend ainsi désormais recentrer HHVM sur le langage Hack. Dans cet article, Facebook annonce aussi son intention d\'ouvrir plus largement son projet à la communauté des développeurs, en communiquant de manière plus transparente sur sa feuille de route, en délivrant du support utilisateur, etc.\r\n\r\nAvec sa version 7, PHP s\'est aligné sur les performances du runtime HHVM (en introduisant le moteur phpng). Mais HHVM garde encore l\'avantage sur un point clé : la compilation JIT (ou Just in time ndlr) qui n\'est pas présente côté PHP. Depuis octobre dernier, Zend planche sur le sujet en vue d\'intégrer cette composante à PHP. On ne sait pas encore quand cet élément pourrait être intégré. C\'est en tout cas une bonne chose que Zend ait communiqué sur ce chantier très en amont dans la feuille de route de PHP 8, et pas à la dernière minute comme il l\'avait fait avec phpng.\r\n\r\nInformation et inscription sur le site du Forum PHP\r\nNote d\'information : Xavier Leune est le président de l\'association française des utilisateurs de PHP (Afup). Il est aussi directeur technique adjoint chez CCM Benchmark (Groupe Figaro, éditeur du JDN).', '2017-09-12 10:00:00', '2017-12-18 13:20:22', NULL),
(2, 'Retour aux sources de la sécurité informatique !', 'Amber Boehm', 'Beaucoup d\'organisations consacrent trop d\'argent à un large éventail de solutions qui ne fonctionnent pas bien et n\'offrent pas une vision complète et intégrée des risques de sécurité informatique.', 'Les cyber-attaques grandissent en nombre comme en puissance. Au cours du premier semestre de 2017, 918 violations de données ont été signalées, ce qui a entraîné l\'exposition de plus de 1,9 milliard de lignes données dans le monde, selon des très études récentes. Nous avons assisté à pléthore d’attaques ultra-sophistiquées contre les principales organisations, ainsi qu\'une militarisation des ransomwares et autres logiciels malveillants tels que WannaCry et NotPetya. \r\n\r\nPour construire une défense solide, il faut commencer par revenir aux bases de la stratégie. Beaucoup d\'organisations consacrent trop d\'argent et de temps à un large éventail de solutions qui ne fonctionnent pas bien en tant qu’ensemble et n\'offrent pas une vision complète et intégrée des risques dans l\'environnement. Cette situation est aggravée par le manque de ressources en matière de cybersécurité, qui a fait couler beaucoup d\'encre. De plus, l’utilisation simultanée de solutions et plateformes provenant de nombreux vendeurs créent de fait des failles qui peuvent être visées par les pirates informatiques. L\'essentiel est d’établir ce que nous appelons une approche de la sécurité par couches, fondée sur des contrôles de sécurité qui sont reconnus comme étant la base d\'un degré élevé de sécurité dans toute l’organisation.\r\n\r\nConcrètement, quelles sont les racines du problème auquel nous sommes confrontés ? Il n\'est pas très difficile de devenir un cybercriminel. Des kits d\'exploitation sont disponibles en ligne, qui simplifient le processus de cyber-attaque, même pour les plus inexpérimentés des pirates. Ces kits comprennent un code d\'exploitation pré écrit, et les criminels auront souvent accès à du support et des mises à jour pour ces kits, tout comme les logiciels commerciaux légaux. En ajoutant à cela des outils sophistiqués, initialement conçus pour le cyber espionnage et désormais facilement accessibles, nous obtenons une boite de jeu remplie d’armes létales.\r\n\r\nSi les correctifs étaient régulièrement appliqués et que la sécurité de chacun était maintenue à un niveau décent, les attaques pourraient être endiguées. Cependant…\r\n\r\nLes logiciels sont intrinsèquement vulnérables : Des centaines de milliers de lignes de code ont été écrites par des humains. Or les humains font des erreurs ; personne n\'écrit de logiciels complètement exempts d\'erreurs et immunisés contre les agresseurs potentiels.\r\n\r\nLes logiciels plus anciens ont davantage de vulnérabilités exposées et les logiciels hérités ne sont pas corrigés : Plus le logiciel est ancien, plus ses vulnérabilités sont découvertes, exposées et exploitées. De plus, les logiciels ne sont plus corrigés passés un certain âge. Ce n\'est pas une règle universelle mais, en général, les logiciels hérités ne reçoivent pas les mises à jour dont ils ont besoin.\r\n\r\nLes logiciels plus récents ne sont pas correctement corrigés : Les correctifs étaient disponibles pour les systèmes d\'exploitation Windows pris en charge avant WannaCry et pour les systèmes non pris en charge après cette attaque. Pourtant, et ce même avec ces patchs disponibles, des organisations ont été victimes de NotPetya un mois après WannaCry. Peut-être qu\'ils n\'avaient pas les outils en place pour patcher leur environnement ou qu\'ils avaient des ressources limitées. Quelle qu\'en soit la raison, la disponibilité des correctifs ne signifie pas qu\'ils sont correctement implémentés.\r\n\r\nC\'est pourquoi il est si important de se protéger grâce à une approche multi couches, qui permet de choisir moins de produits, afin de réaliser des économies de temps et tout en améliorant rapidement le niveau de sécurité. Le patch ne protégera pas contre tout, mais c\'est l\'étape la plus importante du plan de cybersécurité. Si l’application des correctifs n’est pas possible – en cas de systèmes hérités, ou si les correctifs risquent de créer des dysfonctionnements dans l’environnement IT –, il faut bloquer les applications qui ne sont pas corrigées à l\'aide d\'outils tels que les listes blanches d’applications et la gestion des privilèges. Quel que soit le mode et l\'endroit d\'accès des utilisateurs à leur bureau, il est essentiel qu’ils aient accès qu’aux applications autorisées dont ils ont besoin pour être productifs, et qu\'ils ne puissent pas introduire des applications non autorisées susceptibles de réduire la stabilité de l’informatique du bureau, de menacer la sécurité, de violer la conformité des licences, de provoquer des temps d\'arrêt ou d\'augmenter les coûts. Certains prétendent que le contrôle des applications est lourd et peut perturber les utilisateurs, mais il existe des approches plus granulaires, dynamiques et automatiques qui offrent une sécurité adéquate sans inconvénients majeurs. \r\n\r\nUne fois les bases de sécurité établies au niveau logiciel, il faut considérer l’aspect humain. L\'éducation des utilisateurs est vitale pour empêcher les courriels de phishing potentiellement malveillants de s’infiltrer, tandis que des sauvegardes régulières (y compris hors réseau, pour se protéger contre les ransomwares) réduiront le risque de perte de données. Une configuration correcte des pare-feu Windows peut également contribuer à stopper la propagation des ransomwares au sein de l\'entreprise. Cependant, le patching et le contrôle des applications doivent être en haut de la liste pour toutes les organisations cherchant à renforcer leur stratégie contre les attaques et peuvent contribuer à en réduire considérablement la dimension, ce qui permet de prendre plus facilement en charge les attaques qui passent, même avec des ressources limitées.\r\n\r\nLes grandes attaques ont un impact mondial et médiatique, mais ensuite, les organisations retournent à un état de cécité vis-à-vis des enjeux de cybersécurité. Il est probable qu\'elles corrigent les vulnérabilités qui ont été les pointées du doigt, mais elles n\'examinent pas toujours sérieusement la façon dont elles mettront à jour leurs machines par la suite, et ne mettent pas en place un plan de sécurité et d\'intervention proactif en cas d\'incident qui peut simplifier et accélérer le retour à la normale après une attaque, et réduire considérablement les chances d’être infecté en premier lieu. Le fondement d\'une approche dite de \"retour aux sources\" est l’établissement d’un programme de sécurité de façon stratégique plutôt que réactive ou tactique.', '2017-11-24 11:02:34', '2017-12-18 15:19:27', NULL),
(3, 'Back to coding : le développement 20 ans plus tard, qu\'est ce qui a vraiment changé ?', 'Patrice Bertrand', 'Après avoir dirigé une société de service informatique, me voici redevenu programmeur. C’est un parcours peu habituel, dont les enseignements méritent d’être partagés, à différents égards.', 'Une première réflexion porte sur la redécouverte de la programmation après une vingtaine d’années d’absence. Un peu comme on revient dans la ville où l’on a passé son enfance, après vingt année d’éloignement  : on découvre un urbanisme transformé, des immeubles, des commerces, des signalisations qui n’existaient pas, et pourtant l’essentiel est encore là et l’on peut retrouver son chemin.  \r\n\r\nDans cet univers en pointe où le changement est rapide et constant, qu’est-ce que l’on retrouve ? \r\n\r\nDe nouveaux langages de programmation sont apparus, mais aucun n’a révolutionné la programmation.  Les langages proprement dits ne sont pas, à mon sens, la partie la plus déterminante de l’informatique et il est même étonnant qu’ils puissent susciter de telles guerres de chapelles. \r\n\r\nDans les 20 dernières années, le développement est devenu plus complexe.   A moins que ce ne soit mon cerveau qui ne se soit affaibli... Alors que l’on travaillait souvent dans des environnements bornés, aux fonctionnalités limitées, essentiellement propriétaires, on travaille aujourd’hui en assemblant un plus grand nombre de librairies et de services, et il y a une complexité nouvelle à sélectionner, appréhender, et intégrer tous ces composants.   \r\n\r\nLe développeur “full stack” d’aujourd’hui doit maîtriser un langage de backend, une API SQL, et souvent une API NoSQL plus une API de search, HTML, CSS, Javascript, ainsi qu’un framework frontend, et quelques dizaines de composants qu’il aura trouvés sur Github ou ailleurs.  Chacun de ces outils apporte productivité et (idéalement) robustesse, mais il est indéniable qu’il devient plus difficile de maîtriser tous les aspects d’une plateforme à l’état de l’art.   Ce qui conduit à une plus grande taylorisation du développement, réunissant une diversité d’expertises.\r\n\r\nDans les années 90, un mouvement puissant poussait la programmation vers un développement totalement interactif intégré à des environnements graphiques : on disposait à la souris des composants d’interface dans une boîte de dialogue, puis on leur définissait des propriétés, et des méthodes si possible par un simple clic-droit, ou le choix dans une liste déroulante.  L’idée était de masquer, voire d’éliminer, le code source, qui était généré mais si possible qu’on éviterait de manipuler en l’état.\r\n\r\nLorsque le développement d’applications s’est tourné vers le web, certains ont imaginé prolonger ce mouvement : des outils graphiques nous permettraient de poser des objets sur une page et d’en définir les propriétés, et le Html sous-jacent serait rendu invisible. Il est intéressant de constater que cette vision d’une programmation purement interactive a totalement été évacuée dans les 20 dernières années, et ne reviendra plus.  L’informatique est redevenue essentiellement textuelle, alors même que les interfaces finales devenaient toujours plus graphiques.\r\n\r\nUne autre chose frappante est que, malgré 20 années de loi de Moore, les performances restent un sujet essentiel.   Dans certains cas, les gains obtenus côté processeurs ou disques sont dilapidés par les mauvaises habitudes prises par les développeurs tombés tous petits dans la marmite de la CPU pas chère.   Au final, aujourd’hui comme hier, on ne peut éviter quelques compromis entre la beauté de notre modélisation et les temps de réponse.   \r\n\r\nDans un prochain épisode, j’aborderai la question des outils de travail du développeur, et de leur coût tel qu’il est perçu par le dirigeant d’entreprise.', '2017-12-20 15:20:31', '2017-12-20 15:20:31', NULL);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
